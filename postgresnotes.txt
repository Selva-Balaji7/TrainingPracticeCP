create table customers(
id integer primary key,
firstname varchar(50) not null,
lastname varchar(50),
email varchar(255) not null,
birthday date not null);


select * sort_demo_nulls;

create table sort_demo_nulls(num int);
insert into sort_demo_nulls
values (1),(2),(3),(4),(null)

select first_name,lenght(first_name) form customer;
select * from sort_demo_nulls order by num;
select * from sort_demo_nulls order by num nulls first;
select * from sort_demo_nulls order by num desc nulls last;
select distinct category_id from film_category;
select count(*) from film_category;
select count(distinct category_id) from film_category;


select c.customer_id,c.first_name,c.last_name, p.amount,p.payment_date 
from customer c inner join payment p 
on c.customer_id=p.customer_id
order by payment_date
limit 5,



select c.customer_id, c.first_name || ''|| c.last_name as "customer name",
s.first_name || '' || s.last_name as "staff name",
p.amout,p.payment_date
from customer c inner join payment p
 on c.customer_id =p.customer_id
 inner join staff s using(staff_id)
 order by payment_date
 limit 5;
 
 left join:
 select f.film _id,f.title,i.inventory_id
 from film f left join inventory i
 on f.film_id=i.film_id
 where i.inventory_id is null 
 order by title
 limit 10;
 
 right join:
 select f.film _id,f.title,i.inventory_id
 from film f right join inventory i
 on f.film_id=i.film_id
 where i.inventory_id is null 
 order by title
 limit 10;
 
 self join:
 select f1.title,f2.title,f1.length
 from film f1 inner join film f2
 on f1.length=f2.length;
 
 select customer_id,cout(customer_id) as total_orders,sum(amount) as total payments
 from paymentwhere payment_date>'2007-02-16'
 group by customer_id
 having sum(amount)>100
 order by total_payments;
 
 select c.first_name || ' ' || c.last_name as "customer Name",c.customer_id,count(c.customer_id) as total_orders,sum(amount) as total_payments
 from payment p inner join customer c 
 pm c.customer_id=p.customer_id
 where payment_date>'2007-02-16'
 group by customer_id
 having sum(amount)>100
 order by total_payments
 limit 10
 offset 5
 
 select customer_id,staff_id,sum(amount) as "total payments"
 from payment 
 group by customer_id,staff_id
 
 
Grouping Sets:
Grouping Sets allow you to create more flexible and complex GROUP BY clauses. They enable you to define multiple groupings in a single query. 
This is particularly useful when you want to generate reports that require different levels of aggregation in one query.
 
 select staff_id,customer_id,sum(amount)
 from payment
 group by grouping sets(customer_id,staff_id),(staff_id),(customer_id),());
 
 
 select grouping(customer_id),grouping(staff_id),customer_id,staff_id,sum(amount)
 from payment
 group by grouping sets((customer_id),(staff_id),())
 order by customer_id,staff_id;
 
 
select 
extract(year from rental_date) y,
extract(month from rental_date)m,
extract(day from rental_date) d,
count(rental_id)
from rental
group by
rollup (
extract(year from rental_date),
extract(month from rental_date),
extract (day from rental_date)
);

select customer_id,staff_id,sum(amount)
from payment
group by 
customer_id,
cube(staff_id)
order by customer_id,staff_id;

table name alias "action_films": common table expression
with action_films as(
select f.title,f.length 
from film f inner join film_category fc using (film_id)
inner join category c using (category_id)
where c.name='Action')
select * from action_films;

with film_stats as(
--CTE-1: calculate film statistics
select avg(rental_rate) as avg_rental_rate, max(length) as max_length, min(length) as min_length
from film),

customer_stats as (
--CTE 2 calculate customer statistics
select count(distinct customer_id) as total_customers,sum(amount) as total_payments
from payment

--Main Query using the CTEs
select round((select avg_rental_rate from film_stats),2)as avg_film_rental_rate,
(select max_length from film_stats) as max_film_length,
(select min_length from film_stats) as min_film_length,
(select total_customers from customer_stats) as total_customers,
(select total_payments from customer_stats) as total_payments;


Cases:
select title,length,
case when length>0 and length<=50 then 'short' when length>50
and length<=120 then 'medium' when length>120 then 'Long'
end duration
from film 
order by title;

select 
sum(
    case when rental_rate=0.99 then 1 else 0 end 
	) as "Economy",
sum(
    case when rental_rate=2.99 then 1 else 0 and
	) as "Mass",
sum(
    case when rental_rate=2.99 then 1 else 0 and
	) as "Premium"
from film;






 
 
 
